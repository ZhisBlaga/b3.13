class Tag:
    def __init__(self, tag, klass=None,is_single=False, **kwargs):
        self.tag = tag
        self.text = ""
        self.attributes = {}
        self.children = []
        self.is_single = is_single
        self.klass=klass

        #у class в примере 2 значения разделеных пробелом, поэтомы вынес отдельно, по хорошему и  id так же нужно, но в данном прмере id только один
        if self.klass is not None:
            self.attributes["class"] = " ".join(self.klass)

        # остальные атрибуты попадают в kwargs (id, src,data_img)
        for a,b in kwargs.items():
            self.attributes[a]="".join(b)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        return self

    def __iadd__(self, other):
        self.children.append(str(other))
        return self



    def __str__(self):
        attrs = []

        for attribute, value in self.attributes.items():
            attrs.append(' %s="%s"' % (attribute, value))
        attrs = " ".join(attrs)

        if self.is_single:
            return "\n  <{tag}{attrs}>{text}".format(tag=self.tag, attrs=attrs, text=self.text)



        if self.children:
            opening = "\n  <{tag}{attrs}>".format(tag=self.tag, attrs=attrs)
            internal = "%s" % self.text
            for child in self.children:
                internal += child
            ending = "</%s>" % self.tag
            return opening + internal + ending
        else:
            return "\n  <{tag}{attrs}>{text}</{tag}>".format(tag=self.tag, attrs=attrs, text=self.text)


class TopLevelTag(Tag):

    def __str__(self):
        if self.children:
            opening = "<{tag}>".format(tag=self.tag)
            internal = "    %s" % self.text
            for child in self.children:
                internal += child
            ending = "\n</%s>" % self.tag
            return opening + internal + ending+'\n'
        else:
            return "  <{tag}>{text}</{tag}>".format(tag=self.tag, text=self.text)


class HTML(TopLevelTag):
    def __init__(self, output=None):
        self.output = output
        self.tag = 'html'
        self.children = []


    def __exit__(self, type, value, traceback):

        if self.children:
            opening = "<{tag}>\n".format(tag=self.tag)
            internal = ""
            for child in self.children:
                internal += child
            ending = "</%s>" % self.tag
            data = opening + internal + ending

        if self.output is not None:
            with open(self.output,'w+') as f:
                f.write(data)
        else:
           print(data)





if __name__ == "__main__":
    #output=None результат печатается в конcоль, output='test.html' - резульат сохраняется в файл.
    with HTML(output='test.html') as doc:
        with TopLevelTag("head") as head:
            with Tag("title") as title:
                title.text = "hello"
                head += title
            doc += head

        with TopLevelTag("body") as body:
            with Tag("h1", klass=("main-text",)) as h1:
                h1.text = "Test"
                body += h1

            with Tag("div", klass=("container", "container-fluid"), id="lead") as div:
                with Tag("p") as paragraph:
                    paragraph.text = "another test"
                    div += paragraph

                with Tag("img", is_single=True, src="/icon.png", data_image="responsive") as img:
                    div += img

                body += div

            doc += body

